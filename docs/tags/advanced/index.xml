<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Advanced on Technical Notes</title>
    <link>https://jfthuong.github.io/tech-notes/tags/advanced/</link>
    <description>Recent content in Advanced on Technical Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Powered by [Hugo](//gohugo.io).</copyright>
    <lastBuildDate>Fri, 23 Feb 2018 22:14:48 +0800</lastBuildDate>
    
	<atom:link href="https://jfthuong.github.io/tech-notes/tags/advanced/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AsciiDoc - Advanced topics</title>
      <link>https://jfthuong.github.io/tech-notes/2018/02/23/asciidoc---advanced-topics/</link>
      <pubDate>Fri, 23 Feb 2018 22:14:48 +0800</pubDate>
      
      <guid>https://jfthuong.github.io/tech-notes/2018/02/23/asciidoc---advanced-topics/</guid>
      <description>Syntax The whole syntax can be found in the User Manual: http://asciidoctor.org/docs/user-manual
     the source of User Manual can be found here     Code HighLight More details here: http://asciidoctor.org/docs/user-manual/#source-code-blocks
 How to hightlight? Just add the following at the head of your .adoc document under the title
 :source-highlighter: &amp;lt;renderer&amp;gt;   The following renderer exists:
   pygments
  coderay</description>
    </item>
    
    <item>
      <title>Pytest - Advanced</title>
      <link>https://jfthuong.github.io/tech-notes/2018/02/23/pytest---advanced/</link>
      <pubDate>Fri, 23 Feb 2018 22:14:48 +0800</pubDate>
      
      <guid>https://jfthuong.github.io/tech-notes/2018/02/23/pytest---advanced/</guid>
      <description>Passing parameters in the command line In your pytest:
 test_module.py @pytest.mark.unit def test_print_name(name): print (&#34;Displaying name: %s&#34; % name)   In your configuration:
 conftest.py def pytest_addoption(parser): parser.addoption(&#34;--name&#34;, action=&#34;store&#34;, default=&#34;default name&#34;) def pytest_generate_tests(metafunc): # This is called for every test. Only get/set command line arguments # if the argument is specified in the list of test &#34;fixturenames&#34;. option_value = metafunc.config.option.name if &#39;name&#39; in metafunc.fixturenames and option_value is not None: metafunc.</description>
    </item>
    
    <item>
      <title>SCons - Advanced</title>
      <link>https://jfthuong.github.io/tech-notes/2018/02/23/scons---advanced/</link>
      <pubDate>Fri, 23 Feb 2018 22:14:48 +0800</pubDate>
      
      <guid>https://jfthuong.github.io/tech-notes/2018/02/23/scons---advanced/</guid>
      <description>Table of Contents Controlling Output Help function Progress function   Running any command Searching in PATH and directories Specify PATH Environment Variable Specify folders for #include files     Controlling Output Extract from this section: http://scons.org/doc/HTML/scons-user.html#chap-output
 Help function You can specify some help message:
 Help(&amp;quot;&amp;quot;&amp;quot; Type: &amp;#39;scons program&amp;#39; to build the production program, &amp;#39;scons debug&amp;#39; to build the debug version. &amp;quot;&amp;quot;&amp;quot;) # You can append to existing message with &amp;#39;append=True&amp;#39;   The help message is display with</description>
    </item>
    
  </channel>
</rss>